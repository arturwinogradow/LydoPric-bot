from telegram.error import Forbidden
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ForceReply, ReplyKeyboardRemove
from typing import List, Tuple
import random
import logging
import signal
import sys
import json
import time
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ForceReply
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

from flask import Flask
import threading

# –ü—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running!"

def run_web():
    app.run(host='0.0.0.0', port=10000)

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
web_thread = threading.Thread(target=run_web)
web_thread.daemon = True
web_thread.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
import os
TOKEN = os.environ.get('BOT_TOKEN', '7899973479:AAFTh9so7sIZC3pfaNRp1PJRybUYDFdMphs')
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_PASSWORD = "201014"

application = ApplicationBuilder().token(TOKEN).build()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_coins = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_history = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
user_profiles = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –≤—ã–ø–ª–∞—Ç
daily_bonus_times = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
used_promocodes = set()
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∫—É–ø–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_purchases = {}

user_autoclicker_rates = {}

def load_data():
    global user_coins, user_history, user_profiles, daily_bonus_times, used_promocodes, user_purchases, user_autoclicker_rates
    try:
        import os
        file_path = os.path.join(os.path.dirname(__file__), 'data.json')
        with open(file_path, 'r') as f:
            data = json.load(f)
            user_coins = data.get('user_coins', {})
            user_history = data.get('user_history', {})
            user_profiles = data.get('user_profiles', {})
            daily_bonus_times = data.get('daily_bonus_times', {})
            used_promocodes = set(data.get('used_promocodes', []))
            user_purchases = data.get('user_purchases', {})
            user_autoclicker_rates = data.get('user_autoclicker_rates', {})
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_coins = {}
        user_history = {}
        user_profiles = {}
        daily_bonus_times = {}
        used_promocodes = set()
        user_purchases = {}
        user_autoclicker_rates = {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
        user_coins = {}
        user_history = {}
        user_profiles = {}
        daily_bonus_times = {}
        used_promocodes = set()
        user_purchases = {}
        user_autoclicker_rates = {}


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
load_data()

# –°–∏–º–≤–æ–ª—ã –∏ –∏—Ö –≤–µ—Å–∞ –¥–ª—è –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ —Å–ª–æ—Ç–∞—Ö
slot_symbols = {
    'üçí': 100,  # 3 —á–µ—Ä–µ—à–Ω–∏
    'üçá': 50,  # 3 –≤–∏–Ω–æ–≥—Ä–∞–¥–∞
    'üçä': 30,  # 3 –∞–ø–µ–ª—å—Å–∏–Ω–∞
    'üîî': 20,  # 3 –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫–∞
    'üçÄ': 500  # 3 —á–µ—Ç—ã—Ä—ë—Ö–ª–∏—Å—Ç–Ω–∏–∫–∞
}

# –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä—ã –≤ –¥—É—Ä–∞–∫–∞
deck = ['6‚ô†', '7‚ô†', '8‚ô†', '9‚ô†', '10‚ô†', 'J‚ô†', 'Q‚ô†', 'K‚ô†', 'A‚ô†',
        '6‚ô£', '7‚ô£', '8‚ô£', '9‚ô£', '10‚ô£', 'J‚ô£', 'Q‚ô£', 'K‚ô£', 'A‚ô£',
        '6‚ô•', '7‚ô•', '8‚ô•', '9‚ô•', '10‚ô•', 'J‚ô•', 'Q‚ô•', 'K‚ô•', 'A‚ô•',
        '6‚ô¶', '7‚ô¶', '8‚ô¶', '9‚ô¶', '10‚ô¶', 'J‚ô¶', 'Q‚ô¶', 'K‚ô¶', 'A‚ô¶']

# –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∏—Ö –≤—ã–∏–≥—Ä—ã—à–∏ –≤ —Å–ª–æ—Ç–∞—Ö
combinations = {
    ('üçí', 'üçí', 'üçí'): 100,
    ('üçá', 'üçá', 'üçá'): 50,
    ('üçä', 'üçä', 'üçä'): 30,
    ('üîî', 'üîî', 'üîî'): 20,
    ('üçÄ', 'üçÄ', 'üçÄ'): 500,
    ('üçí', 'üçí'): 10,
    ('üçá', 'üçá'): 10,
    ('üçä', 'üçä'): 10,
    ('üîî', 'üîî'): 10,
    ('üçÄ', 'üçÄ'): 10
}

# –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—ã–∏–≥—Ä—ã—à–µ–π –≤ —Ä—É–ª–µ—Ç–∫–µ
roulette_odds = {
    10: 10,
    20: 5,
    30: 3.33,
    40: 2.5,
    50: 2,
    60: 1.67,
    70: 1.43
}


def save_data():
    data = {
        'user_coins': user_coins,
        'user_history': user_history,
        'user_profiles': user_profiles,
        'daily_bonus_times': daily_bonus_times,
        'used_promocodes': list(used_promocodes),
        'user_purchases': user_purchases,
        'user_autoclicker_rates': user_autoclicker_rates
    }
    import os
    file_path = os.path.join(os.path.dirname(__file__), 'data.json')
    with open(file_path, 'w') as f:
        json.dump(data, f)
    logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
def shutdown(signal, frame):
    logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    save_data()
    logger.info("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    sys.exit(0)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
signal.signal(signal.SIGINT, shutdown)
signal.signal(signal.SIGTERM, shutdown)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
load_data()

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é create_game_selection_keyboard –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
def create_game_selection_keyboard():
    keyboard = [
        [KeyboardButton("–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã")],
        [KeyboardButton("–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É")],
        [KeyboardButton("–í—ã–±–æ—Ä"), KeyboardButton("–ö–µ–π—Å—ã")],
        [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å"), KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä"), KeyboardButton("–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤")],
        [KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"), KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É")],
        [KeyboardButton("–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–Ω–µ—Ç–∞–º–∏"), KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")],
        [KeyboardButton("–ú–∞–≥–∞–∑–∏–Ω")],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ú–∞–≥–∞–∑–∏–Ω"
        [KeyboardButton("–í—ã–≤–æ–¥")],  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–≤–æ–¥"

    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∞–º–∏ –≤ —Å–ª–æ—Ç–∞—Ö
def create_slot_control_keyboard():
    keyboard = [
        [KeyboardButton("–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã")],
        [KeyboardButton("–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞")],
        [KeyboardButton("–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É"), KeyboardButton("–£–º–µ–Ω—å—à–∏—Ç—å —Å—Ç–∞–≤–∫—É")],
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É")],
        [KeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∞–º–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ
def create_roulette_control_keyboard():
    keyboard = [
        [KeyboardButton("–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –∏ –≤—ã–±—Ä–∞—Ç—å % –∞–ø–≥—Ä–µ–π–¥–∞")],
        [KeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ % –∞–ø–≥—Ä–µ–π–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ
def create_roulette_odds_keyboard():
    keyboard = [
        [KeyboardButton("10%"), KeyboardButton("20%")],
        [KeyboardButton("30%"), KeyboardButton("40%")],
        [KeyboardButton("50%"), KeyboardButton("60%")],
        [KeyboardButton("70%"), KeyboardButton("–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–∞–≤–∫–∞–º–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Forbidden
async def handle_forbidden_error(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.warning(f"Bot was forbidden to send a message to {update.effective_chat.id}. Bot might have been removed from the group.")
    # –î–æ–±–∞–≤–ª—è–µ–º ID —á–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
    blocked_chats.add(update.effective_chat.id)

# –û–±—ä—è–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
blocked_chats = set()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —á–∞—Ç–∞
async def safe_send_message(chat_id: int, text: str, context: ContextTypes.DEFAULT_TYPE):
    if chat_id in blocked_chats:
        logger.info(f"Skipping sending message to blocked chat {chat_id}.")
        return
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except Forbidden:
        logger.warning(f"Bot was forbidden to send a message to {chat_id}. Bot might have been removed from the group.")
        blocked_chats.add(chat_id)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫ Forbidden
application.add_error_handler(handle_forbidden_error)

# –û–±—ä—è–≤–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
blocked_chats = set()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫ Forbidden
application.add_error_handler(handle_forbidden_error)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ–≥–¥–∞ –±–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω
async def bot_is_offline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–π! –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ!")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await bot_is_offline(update, context)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    if user_id not in user_coins:
        user_coins[user_id] = 100  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
        user_history[user_id] = []  # –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä
        user_profiles[user_id] = {
            'name': user_name,
            'games_played': 0,
            'total_winnings': 0,
            'promocode_used': False
        }
        daily_bonus_times[user_id] = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['bet'] = 10  # –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞
    context.user_data['game_mode'] = None  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã
    await update.message.reply_text(
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ, {user_name}! –í–∞—à Telegram ID: {user_id}. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
        reply_markup=create_game_selection_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
async def select_slot_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    context.user_data['game_mode'] = 'slots'
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –≤ —Å–ª–æ—Ç—ã.", reply_markup=create_slot_control_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –≤ —Ä—É–ª–µ—Ç–∫—É
async def select_roulette_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    context.user_data['game_mode'] = 'roulette'
    await update.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É.", reply_markup=create_roulette_control_keyboard())


async def play_slots(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return
    bet = context.user_data.get('bet', 10)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞–≤–∫—É
    if user_coins[user_id] < bet:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                                        reply_markup=create_slot_control_keyboard())
        return
    user_coins[user_id] -= bet  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    user_profiles[user_id]['games_played'] += 1
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    symbols = list(slot_symbols.keys())
    result = tuple(random.choice(symbols) for _ in range(3))
    message = f"–í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: {' '.join(result)}\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    winnings = 0
    if result in combinations:
        winnings = combinations[result]
    elif any(result[i] == result[j] for i in range(len(result)) for j in range(i + 1, len(result))):
        winnings = bet * 2
    user_coins[user_id] += winnings
    user_profiles[user_id]['total_winnings'] += winnings
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id].append({
        'result': result,
        'bet': bet,
        'winnings': winnings,
        'game_mode': 'slots'
    })
    message += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    message += f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç."
    await update.message.reply_text(message, reply_markup=create_slot_control_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã (—Å—Ç—Ä–æ–∫–∞ 248)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã "–í—ã–±–æ—Ä"
async def choice_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.", reply_markup=create_game_selection_keyboard())
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å:", reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_choice_bet'] = True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä—ã "–í—ã–±–æ—Ä"
async def play_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bet = context.user_data.get('choice_bet', 10)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏
    if user_coins[user_id] < bet:
        await update.message.reply_text(
            f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet}. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
            reply_markup=create_game_selection_keyboard())
        context.user_data.pop('choice_buttons', None)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
        context.user_data.pop('choice_bet', None)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
        context.user_data['game_mode'] = None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
        return

    user_coins[user_id] -= bet  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    user_profiles[user_id]['games_played'] += 1

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –∑–Ω–∞–∫–∞–º–∏ –≤–æ–ø—Ä–æ—Å–∞
    buttons = ['‚ùì', '‚ùì', '‚ùì']
    random.shuffle(buttons)
    keyboard = [
        [KeyboardButton(buttons[0]), KeyboardButton(buttons[1]), KeyboardButton(buttons[2])]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ {bet} –º–æ–Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫:", reply_markup=reply_markup)
    context.user_data['choice_buttons'] = buttons
    context.user_data['choice_bet'] = bet


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–≥—Ä—ã "–í—ã–±–æ—Ä"
async def handle_choice_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    button_text = update.message.text.strip()
    if not context.user_data.get('choice_buttons', False):
        return
    buttons = context.user_data['choice_buttons']
    bet = context.user_data['choice_bet']
    if button_text not in buttons:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.", reply_markup=create_game_selection_keyboard())
        return
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
    win_chance = random.randint(1, 100)
    winnings = 0
    if win_chance <= 33:  # 33% —à–∞–Ω—Å –Ω–∞ —É–¥–≤–æ–µ–Ω–∏–µ
        winnings = bet * 2  # –í—ã–∏–≥—Ä—ã—à —Ä–∞–≤–µ–Ω —É–¥–≤–æ–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–µ
    # –ò–Ω–∞—á–µ winnings –æ—Å—Ç–∞–µ—Ç—Å—è 0, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å–∂–∏–≥–∞–µ—Ç—Å—è
    user_coins[user_id] += winnings
    user_profiles[user_id]['total_winnings'] += winnings
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id].append({
        'result': button_text,
        'bet': bet,
        'winnings': winnings,
        'game_mode': 'choice'
    })
    message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {button_text}\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    if winnings > 0:
        message += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    else:
        message += "–í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    message += f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç."
    await update.message.reply_text(message, reply_markup=create_game_selection_keyboard())
    context.user_data.pop('choice_buttons', None)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    context.user_data.pop('choice_bet', None)  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–≥—Ä—ã
    context.user_data['game_mode'] = None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–≥—Ä—ã "–í—ã–±–æ—Ä"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã "–í—ã–±–æ—Ä"
async def handle_choice_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bet_text = update.message.text.strip()
    if not context.user_data.get('awaiting_choice_bet', False):
        return
    context.user_data['awaiting_choice_bet'] = False
    try:
        bet = int(bet_text)
        if bet < 10:
            await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.", reply_markup=create_game_selection_keyboard())
            return
        if user_coins[user_id] < bet:
            await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet}. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=create_game_selection_keyboard())
            return
        context.user_data['choice_bet'] = bet
        context.user_data['game_mode'] = 'choice'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º game_mode –≤ 'choice'
        await play_choice(update, context)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.", reply_markup=create_game_selection_keyboard())


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_admin_password'] = True

async def handle_admin_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    password = update.message.text.strip()
    if not context.user_data.get('awaiting_admin_password', False):
        return
    context.user_data['awaiting_admin_password'] = False
    if password == ADMIN_PASSWORD:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—á–∏—Å–ª–∏—Ç—å –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å:", reply_markup=ForceReply(selective=True))
        context.user_data['awaiting_admin_amount'] = True
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã.", reply_markup=create_game_selection_keyboard())

async def handle_admin_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    amount_text = update.message.text.strip()
    if not context.user_data.get('awaiting_admin_amount', False):
        return
    context.user_data['awaiting_admin_amount'] = False
    try:
        amount = int(amount_text)
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=create_game_selection_keyboard())
            return
        if user_id not in user_coins:
            user_coins[user_id] = 0
        user_coins[user_id] += amount
        await update.message.reply_text(f"–°—É–º–º–∞ {amount} –º–æ–Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=create_game_selection_keyboard())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.", reply_markup=create_game_selection_keyboard())



async def withdraw_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await update.message.reply_text("–¢—ã –¥–æ–ª–±–æ–µ–±? ", reply_markup=create_game_selection_keyboard())



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
async def free_play(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.", reply_markup=create_game_selection_keyboard())
        return
    user_profiles[user_id]['games_played'] += 1
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
    symbols = list(slot_symbols.keys())
    result = tuple(random.choice(symbols) for _ in range(3))
    message = f"–í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: {' '.join(result)}\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    winnings = 0
    if result in combinations:
        winnings = combinations[result]  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –¥–ª—è —Ç—Ä–µ—Ö —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    elif any(result[i] == result[j] for i in range(len(result)) for j in range(i + 1, len(result))):
        winnings = 5  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –¥–≤—É—Ö —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    user_coins[user_id] += winnings
    user_profiles[user_id]['total_winnings'] += winnings
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id].append({
        'result': result,
        'bet': 0,
        'winnings': winnings,
        'game_mode': 'slots'
    })
    message += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!\n"  # –î–æ–±–∞–≤–ª–µ–Ω –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
    message += f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç."
    await update.message.reply_text(message, reply_markup=create_slot_control_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∏–≥—Ä—ã


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã "–ö–µ–π—Å—ã"
async def cases_game(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.", reply_markup=create_game_selection_keyboard())
        return
    keyboard = [
        [KeyboardButton("–°–ø–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π (100 –º–æ–Ω–µ—Ç)"), KeyboardButton("–ë–æ–≥–∞—Ç—ã–π (500 –º–æ–Ω–µ—Ç)")],
        [KeyboardButton("–ú–∞–∂–æ—Ä (1000 –º–æ–Ω–µ—Ç)"), KeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å:", reply_markup=reply_markup)
    context.user_data['game_mode'] = 'cases'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º game_mode –≤ 'cases'

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–µ–π—Å–∞
async def handle_case_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    case_text = update.message.text.strip()
    if case_text == "–°–ø–∞—Å–∏—Ç–µ–ª—å–Ω—ã–π (100 –º–æ–Ω–µ—Ç)":
        cost = 100
        if 'discount_cases' in user_purchases.get(user_id, []):
            cost = int(cost * 0.8)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É -20%
        odds = {50: 0, 20: 200, 30: 150}
    elif case_text == "–ë–æ–≥–∞—Ç—ã–π (500 –º–æ–Ω–µ—Ç)":
        cost = 500
        if 'discount_cases' in user_purchases.get(user_id, []):
            cost = int(cost * 0.8)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É -20%
        odds = {50: 0, 20: 1000, 30: 750}
    elif case_text == "–ú–∞–∂–æ—Ä (1000 –º–æ–Ω–µ—Ç)":
        cost = 1000
        if 'discount_cases' in user_purchases.get(user_id, []):
            cost = int(cost * 0.8)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–¥–∫—É -20%
        odds = {50: 0, 20: 2000, 30: 1500}
    elif case_text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã":
        await go_back_to_game_selection(update, context)
        return
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–µ–π—Å–æ–≤.", reply_markup=create_game_selection_keyboard())
        return
    if user_coins[user_id] < cost:
        await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.", reply_markup=create_game_selection_keyboard())
        return
    user_coins[user_id] -= cost  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞ –∏–∑ –±–∞–ª–∞–Ω—Å–∞
    user_profiles[user_id]['games_played'] += 1
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–∏–≥—Ä—ã—à–∞
    win_chance = random.randint(1, 100)
    winnings = 0
    cumulative_percentage = 0
    for percentage, reward in odds.items():
        cumulative_percentage += percentage
        if win_chance <= cumulative_percentage:
            winnings = reward
            break
    user_coins[user_id] += winnings
    user_profiles[user_id]['total_winnings'] += winnings
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
    user_history[user_id].append({
        'case': case_text,
        'cost': cost,
        'winnings': winnings,
        'game_mode': 'cases'
    })
    message = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–µ–π—Å: {case_text}\n"
    message += f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {cost} –º–æ–Ω–µ—Ç.\n"
    message += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!\n"
    message += f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç."
    await update.message.reply_text(message, reply_markup=create_game_selection_keyboard())
    context.user_data['game_mode'] = None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–µ–π—Å–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞
async def shop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.", reply_markup=create_game_selection_keyboard())
        return
    message = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        "1. –ê–≤—Ç–æ–ö–ª–∏–∫–µ—Ä –ë–æ—Ç, 40 –≤ 60—Å - 20000 –º–æ–Ω–µ—Ç\n"
        "2. –°–∫–∏–¥–∫–∞ -20% –Ω–∞ –∫–µ–π—Å—ã - 10000 –º–æ–Ω–µ—Ç\n"
        "3. –£–ª—É—á—à–µ–Ω–∏–µ –ê–≤—Ç–æ–ö–ª–∏–∫–µ—Ä –ë–æ—Ç–∞, +40 –≤ 60—Å - 100000 –º–æ–Ω–µ—Ç (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ)\n\n"
        "–î–ª—è –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (1, 2 –∏–ª–∏ 3)."
    )
    await update.message.reply_text(message, reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_shop_item'] = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
async def handle_shop_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    item_text = update.message.text.strip()
    if not context.user_data.get('awaiting_shop_item', False):
        return
    context.user_data['awaiting_shop_item'] = False
    try:
        item_number = int(item_text)
        if item_number == 1:
            if user_coins[user_id] < 20000:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=create_game_selection_keyboard())
                return
            user_coins[user_id] -= 20000
            user_purchases.setdefault(user_id, []).append('autoclicker_1')
            user_autoclicker_rates[user_id] = user_autoclicker_rates.get(user_id, 0) + 40  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –ê–≤—Ç–æ–ö–ª–∏–∫–µ—Ä –ë–æ—Ç, 40 –≤ 60—Å!", reply_markup=create_game_selection_keyboard())
        elif item_number == 2:
            if user_coins[user_id] < 10000:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=create_game_selection_keyboard())
                return
            user_coins[user_id] -= 10000
            user_purchases.setdefault(user_id, []).append('discount_cases')
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –°–∫–∏–¥–∫—É -20% –Ω–∞ –∫–µ–π—Å—ã!", reply_markup=create_game_selection_keyboard())
        elif item_number == 3:
            if 'autoclicker_1' not in user_purchases.get(user_id, []):
                await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —ç—Ç–æ —É–ª—É—á—à–µ–Ω–∏–µ –±–µ–∑ –ê–≤—Ç–æ–ö–ª–∏–∫–µ—Ä–∞ –ë–æ—Ç–∞, 40 –≤ 60—Å.", reply_markup=create_game_selection_keyboard())
                return
            if user_coins[user_id] < 100000:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=create_game_selection_keyboard())
                return
            user_coins[user_id] -= 100000
            user_purchases.setdefault(user_id, []).append('autoclicker_upgrade')
            user_autoclicker_rates[user_id] = user_autoclicker_rates.get(user_id, 0) + 40  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ –¥–æ 80 –≤ 60—Å
            await update.message.reply_text("–í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –£–ª—É—á—à–µ–Ω–∏–µ –ê–≤—Ç–æ–ö–ª–∏–∫–µ—Ä –ë–æ—Ç–∞, +40 –≤ 60—Å!", reply_markup=create_game_selection_keyboard())
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (1, 2 –∏–ª–∏ 3).", reply_markup=create_game_selection_keyboard())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (1, 2 –∏–ª–∏ 3).", reply_markup=create_game_selection_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
async def add_autoclicker_coins(context: ContextTypes.DEFAULT_TYPE) -> None:
    for user_id, rate in user_autoclicker_rates.items():
        if rate > 0:
            user_coins[user_id] += rate
            save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç–∞—Ö
async def decrease_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    current_bet = context.user_data.get('bet', 10)
    new_bet = current_bet - 10

    if new_bet < 10:
        await update.message.reply_text(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.", reply_markup=create_slot_control_keyboard())
        return

    context.user_data['bet'] = new_bet
    await update.message.reply_text(f"–°—Ç–∞–≤–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∞ –¥–æ {new_bet} –º–æ–Ω–µ—Ç.",
                                    reply_markup=create_slot_control_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç–∞—Ö
async def enter_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_bet'] = True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç–∞—Ö
async def handle_entered_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bet_text = update.message.text.strip()
    if not context.user_data.get('awaiting_bet', False):
        return
    context.user_data['awaiting_bet'] = False
    try:
        bet = int(bet_text)
        if bet < 10:
            await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.", reply_markup=create_slot_control_keyboard())
            return
        if user_coins[user_id] < bet:
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet}. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                reply_markup=create_slot_control_keyboard())
            return
        context.user_data['bet'] = bet
        await update.message.reply_text(f"–°—Ç–∞–≤–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {bet} –º–æ–Ω–µ—Ç.",
                                        reply_markup=create_slot_control_keyboard())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.",
                                        reply_markup=create_slot_control_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 464)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã
async def go_back_to_game_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    context.user_data['game_mode'] = None
    await update.message.reply_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã.", reply_markup=create_game_selection_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏ –∏ –≤—ã–±–æ—Ä–∞ % –∞–ø–≥—Ä–µ–π–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ
async def enter_roulette_bet_and_odds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_roulette_bet'] = True

save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ (—Å—Ç—Ä–æ–∫–∞ 464)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ
async def handle_entered_roulette_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    bet_text = update.message.text.strip()
    if not context.user_data.get('awaiting_roulette_bet', False):
        return
    context.user_data['awaiting_roulette_bet'] = False
    try:
        bet = int(bet_text)
        if bet < 10:
            await update.message.reply_text("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ 10 –º–æ–Ω–µ—Ç.",
                                            reply_markup=create_roulette_control_keyboard())
            return
        if user_coins[user_id] < bet:
            await update.message.reply_text(
                f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet}. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                reply_markup=create_roulette_control_keyboard())
            return
        context.user_data['roulette_bet'] = bet
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ % –∞–ø–≥—Ä–µ–π–¥–∞:", reply_markup=create_roulette_odds_keyboard())
        context.user_data['awaiting_roulette_odds'] = True
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–≤–∫–∏.",
                                        reply_markup=create_roulette_control_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ (—Å—Ç—Ä–æ–∫–∞ 504)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Forbidden
async def handle_forbidden_error(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.warning(f"Bot was forbidden to send a message to {update.effective_chat.id}. Bot might have been removed from the group.")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ % –∞–ø–≥—Ä–µ–π–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ
async def handle_roulette_odds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    odds_text = update.message.text.strip()
    if not context.user_data.get('awaiting_roulette_odds', False):
        return
    context.user_data['awaiting_roulette_odds'] = False
    try:
        odds = int(odds_text.strip('%'))
        if odds not in roulette_odds:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö % –∞–ø–≥—Ä–µ–π–¥–∞.",
                                            reply_markup=create_roulette_odds_keyboard())
            return
        bet = context.user_data.get('roulette_bet', 10)
        user_coins[user_id] -= bet  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
        user_profiles[user_id]['games_played'] += 1
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
        win_chance = random.randint(1, 100)
        message = f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç"
        message += f"–í—ã–±—Ä–∞–Ω–Ω—ã–π % –∞–ø–≥—Ä–µ–π–¥–∞: {odds}%"
        winnings = 0
        if win_chance <= odds:
            winnings = round(bet * roulette_odds[odds])  # –û–∫—Ä—É–≥–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
            user_coins[user_id] += winnings
            user_profiles[user_id]['total_winnings'] += winnings
            message += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!"
        else:
            message += "–í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."
        message += f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç."
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history[user_id].append({
            'bet': bet,
            'winnings': winnings,
            'odds': odds,
            'game_mode': 'roulette'
        })
        await update.message.reply_text(message, reply_markup=create_roulette_control_keyboard())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö % –∞–ø–≥—Ä–µ–π–¥–∞.",
                                        reply_markup=create_roulette_odds_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ % –∞–ø–≥—Ä–µ–π–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ (—Å—Ç—Ä–æ–∫–∞ 559)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞
async def show_balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return

    await update.message.reply_text(f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                                    reply_markup=create_game_selection_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.", reply_markup=create_game_selection_keyboard())
        return
    profile = user_profiles[user_id]
    message = (
        f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {profile['name']}:\n"
        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
        f"–ë–∞–ª–∞–Ω—Å: {user_coins[user_id]} –º–æ–Ω–µ—Ç\n"
        f"–ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {profile['games_played']}\n"
        f"–û–±—â–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏: {profile['total_winnings']} –º–æ–Ω–µ—Ç"
    )
    await update.message.reply_text(message, reply_markup=create_game_selection_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
async def show_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.", reply_markup=create_game_selection_keyboard())
        return
    history = user_history.get(user_id, [])
    if not history:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä.", reply_markup=create_game_selection_keyboard())
        return
    message = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≥—Ä:\n"
    for i, game in enumerate(history, start=1):
        if game['game_mode'] == 'slots':
            result = ' '.join(game['result'])
            bet = game['bet']
            winnings = game['winnings']
            message += f"{i}. –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã: –í—ã–ø–∞–ª–∏ —Å–ª–æ—Ç—ã: {result}, –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç, –í—ã–∏–≥—Ä—ã—à: {winnings} –º–æ–Ω–µ—Ç\n"
        elif game['game_mode'] == 'roulette':
            bet = game['bet']
            winnings = game['winnings']
            odds = game['odds']
            message += f"{i}. –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É: –°—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç, % –∞–ø–≥—Ä–µ–π–¥–∞: {odds}%, –í—ã–∏–≥—Ä—ã—à: {winnings} –º–æ–Ω–µ—Ç\n"
    await update.message.reply_text(message, reply_markup=create_game_selection_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
async def show_top_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–æ–Ω–µ—Ç
    sorted_users = sorted(user_coins.items(), key=lambda x: x[1], reverse=True)[:10]
    if not sorted_users:
        await update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–æ–Ω–µ—Ç.", reply_markup=create_game_selection_keyboard())
        return
    message = "–¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤:\n"
    for rank, (user_id, coins) in enumerate(sorted_users, start=1):
        user_name = user_profiles.get(user_id, {}).get('name', 'Unknown')
        message += f"{rank}. {user_name}: {coins} –º–æ–Ω–µ—Ç\n"
    await update.message.reply_text(message, reply_markup=create_game_selection_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def use_promocode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return
    if user_profiles[user_id].get('promocode_used', False):
        await update.message.reply_text("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=create_game_selection_keyboard())
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_promocode'] = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async def handle_promocode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    promocode = update.message.text.strip()
    if not context.user_data.get('awaiting_promocode', False):
        return
    context.user_data['awaiting_promocode'] = False
    if promocode == "1000" and promocode not in used_promocodes:
        user_coins[user_id] += 1000
        user_profiles[user_id]['promocode_used'] = True
        used_promocodes.add(promocode)
        save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        await update.message.reply_text("–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 1000 –º–æ–Ω–µ—Ç.", reply_markup=create_game_selection_keyboard())
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", reply_markup=create_game_selection_keyboard())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ % –∞–ø–≥—Ä–µ–π–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ
async def handle_roulette_odds(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    odds_text = update.message.text.strip()
    if not context.user_data.get('awaiting_roulette_odds', False):
        return
    context.user_data['awaiting_roulette_odds'] = False
    try:
        odds = int(odds_text.strip('%'))
        if odds not in roulette_odds:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö % –∞–ø–≥—Ä–µ–π–¥–∞.",
                                            reply_markup=create_roulette_odds_keyboard())
            return
        bet = context.user_data.get('roulette_bet', 10)
        user_coins[user_id] -= bet  # –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–∞–≤–∫—É –∏–∑ –±–∞–ª–∞–Ω—Å–∞
        user_profiles[user_id]['games_played'] += 1
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
        win_chance = random.randint(1, 100)
        message = f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {bet} –º–æ–Ω–µ—Ç\n"
        message += f"–í—ã–±—Ä–∞–Ω–Ω—ã–π % –∞–ø–≥—Ä–µ–π–¥–∞: {odds}%\n"
        winnings = 0
        if win_chance <= odds:
            winnings = round(bet * roulette_odds[odds])  # –û–∫—Ä—É–≥–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
            user_coins[user_id] += winnings
            user_profiles[user_id]['total_winnings'] += winnings
            message += f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {winnings} –º–æ–Ω–µ—Ç!\n"
        else:
            message += "–í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏.\n"
        message += f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç."
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_history[user_id].append({
            'bet': bet,
            'winnings': winnings,
            'odds': odds,
            'game_mode': 'roulette'
        })
        await update.message.reply_text(message, reply_markup=create_roulette_control_keyboard())
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö % –∞–ø–≥—Ä–µ–π–¥–∞.",
                                        reply_markup=create_roulette_odds_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ % –∞–ø–≥—Ä–µ–π–¥–∞ –≤ —Ä—É–ª–µ—Ç–∫–µ (—Å—Ç—Ä–æ–∫–∞ 559)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã
async def get_daily_bonus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    last_bonus_time = daily_bonus_times.get(user_id, 0)
    current_time = time.time()
    if current_time - last_bonus_time < 86400:  # 86400 —Å–µ–∫—É–Ω–¥ = 24 —á–∞—Å–∞
        await update.message.reply_text("–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
                                        reply_markup=create_game_selection_keyboard())
        return
    bonus_amount = 200  # –°—É–º–º–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã
    user_coins[user_id] += bonus_amount
    daily_bonus_times[user_id] = current_time
    await update.message.reply_text(f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                                    reply_markup=create_game_selection_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤—ã–ø–ª–∞—Ç—ã (—Å—Ç—Ä–æ–∫–∞ 636)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö
async def show_rules(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    rules_message = (
        "–ü—Ä–∞–≤–∏–ª–∞ –∫–∞–∑–∏–Ω–æ:\n"
        "1. –ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã:\n"
        "   - –°—Ç–∞–≤–∫–∞: –æ—Ç 10 –º–æ–Ω–µ—Ç.\n"
        "   - –í—ã–∏–≥—Ä—ã—à–∏:\n"
        "     - 3 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤—ã–∏–≥—Ä—ã—à.\n"
        "     - 2 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞: —É–¥–≤–æ–µ–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞.\n"
        "   - –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à 5 –º–æ–Ω–µ—Ç.\n"
        "2. –ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É:\n"
        "   - –°—Ç–∞–≤–∫–∞: –æ—Ç 10 –º–æ–Ω–µ—Ç.\n"
        "   - –í—ã–±–æ—Ä % –∞–ø–≥—Ä–µ–π–¥–∞: 10%, 20%, 30%, 40%, 50%, 60%, 70%.\n"
        "   - –ß–µ–º –º–µ–Ω—å—à–µ %, —Ç–µ–º –≤—ã—à–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–∞.\n"
        "   - –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–µ–π –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞.\n"
        "3. –ü—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ '1000' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è 1000 –º–æ–Ω–µ—Ç (–æ–¥–∏–Ω —Ä–∞–∑).\n"
        "4. **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞**:\n"
        "   - –ü–æ–ª—É—á–∞–π—Ç–µ 200 –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞."
    )
    await update.message.reply_text(rules_message, reply_markup=create_game_selection_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def contact_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    admin_username = "@lonyxx2"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

    await update.message.reply_text(f"–î–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {admin_username}",
                                    reply_markup=create_game_selection_keyboard())

async def handle_share_user_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    share_user_id_text = update.message.text.strip()
    if not context.user_data.get('awaiting_share_user_id', False):
        return
    context.user_data['awaiting_share_user_id'] = False
    try:
        share_user_id = int(share_user_id_text)
        if share_user_id == user_id:
            await update.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–Ω–µ—Ç–∞–º–∏ —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.",
                                            reply_markup=create_game_selection_keyboard())
            return
        if share_user_id not in user_coins:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                                            reply_markup=create_game_selection_keyboard())
            return
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:",
                                        reply_markup=ForceReply(selective=True))
        context.user_data['share_user_id'] = share_user_id
        context.user_data['awaiting_share_amount'] = True
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                                        reply_markup=create_game_selection_keyboard())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç
async def handle_share_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    share_amount_text = update.message.text.strip()
    if not context.user_data.get('awaiting_share_amount', False):
        return
    context.user_data['awaiting_share_amount'] = False
    try:
        share_amount = int(share_amount_text)
        if share_amount <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.",
                                            reply_markup=create_game_selection_keyboard())
            return
        if user_coins[user_id] < share_amount:
            await update.message.reply_text(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–¥–µ–ª–∫–∏. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                                            reply_markup=create_game_selection_keyboard())
            return
        share_user_id = context.user_data.get('share_user_id')
        user_coins[user_id] -= share_amount
        user_coins[share_user_id] += share_amount
        await update.message.reply_text(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å {share_amount} –º–æ–Ω–µ—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {share_user_id}. –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
            reply_markup=create_game_selection_keyboard())
        await context.bot.send_message(chat_id=share_user_id,
                                       text=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {share_amount} –º–æ–Ω–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç.",
                                        reply_markup=create_game_selection_keyboard())
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç (—Å—Ç—Ä–æ–∫–∞ 688)


async def share_coins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–Ω–µ—Ç–∞–º–∏:",
                                    reply_markup=ForceReply(selective=True))
    context.user_data['awaiting_share_user_id'] = True

save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç (—Å—Ç—Ä–æ–∫–∞ 688)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–æ—Ç–∞—Ö
async def increase_bet(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id not in user_coins:
        await update.message.reply_text("–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É. –í–≤–µ–¥–∏—Ç–µ /start.",
                                        reply_markup=create_game_selection_keyboard())
        return
    current_bet = context.user_data.get('bet', 10)
    new_bet = current_bet + 10
    if new_bet > user_coins[user_id]:
        await update.message.reply_text(f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –±–æ–ª—å—à–µ –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞. –£ –≤–∞—Å {user_coins[user_id]} –º–æ–Ω–µ—Ç.",
                                        reply_markup=create_slot_control_keyboard())
        return
    context.user_data['bet'] = new_bet
    await update.message.reply_text(f"–°—Ç–∞–≤–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {new_bet} –º–æ–Ω–µ—Ç.",
                                    reply_markup=create_slot_control_keyboard())

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_message –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    text = update.message.text

    if context.user_data.get('awaiting_admin_password', False):
        await handle_admin_password(update, context)
    elif context.user_data.get('awaiting_admin_amount', False):
        await handle_admin_amount(update, context)
    elif context.user_data.get('awaiting_promocode', False):
        await handle_promocode(update, context)
    elif context.user_data.get('awaiting_bet', False):
        await handle_entered_bet(update, context)
    elif context.user_data.get('awaiting_roulette_bet', False):
        await handle_entered_roulette_bet(update, context)
    elif context.user_data.get('awaiting_roulette_odds', False):
        await handle_roulette_odds(update, context)
    elif context.user_data.get('awaiting_share_user_id', False):
        await handle_share_user_id(update, context)
    elif context.user_data.get('awaiting_share_amount', False):
        await handle_share_amount(update, context)
    elif context.user_data.get('awaiting_choice_bet', False):
        await handle_choice_bet(update, context)
    elif context.user_data.get('choice_buttons', False):
        await handle_choice_button(update, context)
    elif context.user_data.get('game_mode') == 'slots':
        if text == "–ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã":
            await play_slots(update, context)
        elif text == "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∏–≥—Ä–∞":
            await free_play(update, context)
        elif text == "–£–≤–µ–ª–∏—á–∏—Ç—å —Å—Ç–∞–≤–∫—É":
            await increase_bet(update, context)
        elif text == "–£–º–µ–Ω—å—à–∏—Ç—å —Å—Ç–∞–≤–∫—É":
            await decrease_bet(update, context)
        elif text == "–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É":
            await enter_bet(update, context)
        elif text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã":
            await go_back_to_game_selection(update, context)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=create_slot_control_keyboard())
    elif context.user_data.get('game_mode') == 'roulette':
        if text == "–í–≤–µ—Å—Ç–∏ —Å—Ç–∞–≤–∫—É –∏ –≤—ã–±—Ä–∞—Ç—å % –∞–ø–≥—Ä–µ–π–¥–∞":
            await enter_roulette_bet_and_odds(update, context)
        elif text == "–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã":
            await go_back_to_game_selection(update, context)
        elif text in ["10%", "20%", "30%", "40%", "50%", "60%", "70%"]:
            await handle_roulette_odds(update, context)
        elif text == "–ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å—Ç–∞–≤–∫–∞–º–∏":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:", reply_markup=ForceReply(selective=True))
            context.user_data['awaiting_roulette_bet'] = True
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=create_roulette_control_keyboard())
    elif context.user_data.get('game_mode') == 'choice':  # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è game_mode 'choice'
        await handle_choice_button(update, context)
    elif context.user_data.get('game_mode') == 'cases':
        await handle_case_selection(update, context)
    elif context.user_data.get('awaiting_shop_item', False):
        await handle_shop_item(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    elif context.user_data.get('awaiting_dumbbell_bet', False):
        await handle_entered_dumbbell_bet(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ –¥—É—Ä–∞–∫–∞
    elif context.user_data.get('awaiting_player_attack', False) or context.user_data.get('awaiting_player_defense', False):
        await handle_player_card(update, context)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –≤ –¥—É—Ä–∞–∫–∞
    else:
        if text == "–ò–≥—Ä–∞ –≤ —Å–ª–æ—Ç—ã":
            await select_slot_game(update, context)
        elif text == "–ò–≥—Ä–∞ –≤ —Ä—É–ª–µ—Ç–∫—É":
            await select_roulette_game(update, context)
        elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å":
            await show_balance(update, context)
        elif text == "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å":
            await show_profile(update, context)
        elif text == "–ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä":
            await show_history(update, context)
        elif text == "–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤":
            await show_top_players(update, context)
        elif text == "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥":
            await use_promocode(update, context)
        elif text == "–ü–æ–ª—É—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –≤—ã–ø–ª–∞—Ç—É":
            await get_daily_bonus(update, context)
        elif text == "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–Ω–µ—Ç–∞–º–∏":
            await share_coins(update, context)
        elif text == "–ü—Ä–∞–≤–∏–ª–∞":
            await show_rules(update, context)
        elif text == "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º":
            await contact_admin(update, context)
        elif text == "–í—ã–±–æ—Ä":
            await choice_game(update, context)
        elif text == "–ö–µ–π—Å—ã":
            await cases_game(update, context)
        elif text == "–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤":
            await admin_command(update, context)
        elif text == "–í—ã–≤–æ–¥":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–í—ã–≤–æ–¥"
            await withdraw_command(update, context)
        elif text == "–ú–∞–≥–∞–∑–∏–Ω":  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–Ω–æ–ø–∫–∏ "–ú–∞–≥–∞–∑–∏–Ω"
            await shop(update, context)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º.", reply_markup=create_game_selection_keyboard())

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
application = ApplicationBuilder().token(TOKEN).build()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
start_handler = CommandHandler('start', start)
shop_handler = CommandHandler('shop', shop)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /shop
message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
rules_handler = CommandHandler('rules', show_rules)
contact_admin_handler = CommandHandler('contact', contact_admin)
withdraw_handler = CommandHandler('withdraw', withdraw_command)
application.add_handler(withdraw_handler)
application.add_handler(start_handler)
application.add_handler(shop_handler)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /shop
application.add_handler(message_handler)
application.add_handler(rules_handler)
application.add_handler(contact_admin_handler)
admin_handler = CommandHandler('admin', admin_command)
application.add_handler(admin_handler)



# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
application.run_polling()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
application.add_handler(MessageHandler(filters.ALL, handle_all_messages))


